{"version":3,"file":"static/js/342.2c134dc9.chunk.js","mappings":"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","sources":["global/texts/texts-calibrate-page.js","helpers/logical-functions/compute-error.jsx","helpers/logical-functions/calibrate.jsx","pages/simulation/steps/calibrate.jsx"],"sourcesContent":["const INFORMATION_DESCRIPTION = 'This step allows you to calibrate the model parameters. These parameters are specified in the columns: \"alpha\", \"alpha_prime\", and \"beta\" from the indicators data template. If you have never calibrated PPI, you must run this step to obtain the parameter values. Once you have performed this step, you can download the parameter values and copy them into the indicators template so that, in the future, you do not need to perform the calibration again (the skip button should be enabled if the parameter values are provided in the indicators dataset). If your indicators data change, you should perform this step again, as the parameters need to be re-calibrated to capture such change.';\n\nconst CALIBRATION_DESCRIPTION = 'You can determine how good should the calibration quality be. The higher the quality, the more time it takes to calibrate the model. If the calibration is taking too long, you can reset it and choose a lower quality. For quick tests, it is advisable to use a quality value around 0.3. Once you are sure about the type of exercise and the data that you plan to use, you can calibrate the model at a higher quality. A quality of 1 is theoretically the highest, but it is unachievable in practical terms due to the stochasticity of the model.';\n\nexport const texts_calibrate = {\n  INFORMATION_DESCRIPTION,\n  CALIBRATION_DESCRIPTION}\n","import { ppi } from \"./runppi\"\n\n// Computes a set of Monte Carlo simulations of PPI, obtains their average statistics,\n// and computes the error with respect to IF and success_rates. Called by the calibrate function.\nfunction computeError(I0, alphas, alphas_prime, betas, A, R, qm, rl, Bs, B_dict, G, T,\n  IF, success_rates, parallel_processes, test, sample_size, for_calibrate = false) {\n  const sols = []\n  if (parallel_processes === undefined || parallel_processes == null) {\n    for (const itera in Array.from({ length: sample_size })) {\n      sols.push(ppi(I0, alphas, alphas_prime,\n        betas, A, R, null, qm, rl, null, null,\n        Bs, B_dict, G = null, T, null, test, for_calibrate))\n    }\n  }\n  let I_hatArray = Array(I0.length).fill([]);\n  let gamma_hatArray = Array(I0.length).fill([]);\n  const tsi = sols[0][0].tolist();\n  sols.forEach((sol) => {\n    sol[0].tolist().forEach((j, key) => {\n      I_hatArray[key] = [...I_hatArray[key], j[j.length -1]];\n    });\n    sol[5].tolist().forEach((j, key) => {\n      // eslint-disable-next-line no-undef\n      gamma_hatArray[key] = [...gamma_hatArray[key], nj.mean(j)];\n    });\n  });\n  // I_hatArray matrix [#indicators x CALIBRATE_SAMPLE_SIZE]\n  // eslint-disable-next-line no-undef\n  const I_hat = I_hatArray.map((ihat) => nj.mean(ihat));\n  // gamma_hatArray matrix [#indicators x CALIBRATE_SAMPLE_SIZE]\n  // eslint-disable-next-line no-undef \n  const gamma_hat = gamma_hatArray.map((gammaHat) => nj.mean(gammaHat));\n  const error_alpha = Object.keys(IF).map((i) => (IF[i] - I_hat[i]));\n  const error_beta = Object.keys(success_rates).map(i => success_rates[i] - gamma_hat[i]);\n  let sum_error_alpha_beta = []\n  sum_error_alpha_beta = sum_error_alpha_beta.concat(error_alpha)\n  sum_error_alpha_beta = sum_error_alpha_beta.concat(error_beta)\n  // eslint-disable-next-line no-undef\n  return [nj.array(sum_error_alpha_beta), sols[0][0].shape[1]];\n\n}\n\nexport { computeError };\n","import { assert } from \"../utils\";\nimport { computeError } from \"./compute-error\";\n// import JSZip from \"jszip\";\n// import { saveAs } from 'file-saver';\n\n/*\nconst errorsAlpha = [];\nconst errorsBeta = [];\nconst downloadZip = () => {\n  var zip = new JSZip();\n  errorsAlpha.forEach((alpha, key) => {\n    const alphaText = alpha.join(', ');\n    const betaText = errorsBeta[key].join(', ');\n    zip.file(`errors_alpha_t${key + 1}`, `[${alphaText}]`);\n    zip.file(`errors_beta_t${key + 1}`, `[${betaText}]`);\n  })\n  zip.generateAsync({ type: \"blob\" }).then(function (content) {\n    saveAs(content, \"web.zip\");\n  });\n}\n*/\nconst calibrate = (\n  ID, I0, IF, success_rates, A, R, qm, rl, Bs, B_dict,\n  T = 50, parallel_processes, threshold,\n  verbose, low_precision_counts,\n  increment, test, sample_size, for_calibrate = true\n) => {\n  // eslint-disable-next-line no-undef\n  nj.config.printThreshold = 4;\n  // Check data integrity\n  success_rates = success_rates.map(function (item) { return item >= 1 ? 0.95 : item; });\n  success_rates = success_rates.map(function (item) { return item <= 0 ? 0.05 : item; });\n\n  assert(threshold < 1, 'the threshold must be lower than 1')\n  assert(I0.length == IF.length, 'I0 and IF must have the same size')\n\n\n  // # Initialize hyperparameters and containers\n  const N = I0.length\n  // eslint-disable-next-line no-undef\n  var params = nj.ones(3 * N).multiply(0.5).tolist()  // vector containing all the parameters that need calibration\n\n  var counter = 0\n  // eslint-disable-next-line no-undef\n  let GoF_alpha = nj.zeros(N)\n  // eslint-disable-next-line no-undef\n  let GoF_beta = nj.zeros(N)\n  let list_TF = []\n  let alphas = [];\n  let alphas_prime = [];\n  let betas = [];\n  let errors_alpha = [];\n  let errors_beta = [];\n  // Main iteration of the calibration\n  // Iterates until the minimum threshold criterion has been met, and at least 100 iterations have taken place\n  // eslint-disable-next-line no-undef\n  while (nj.mean(GoF_alpha) < threshold || nj.mean(GoF_beta) < threshold) {\n    counter += 1 // Makes sure at least 100 iteartions are performed\n\n    // unpack the parameter vector into 3 vectors that correspond to the different parameter types\n    alphas = params.slice(0, N)\n    alphas_prime = params.slice(N, 2 * N)\n    betas = params.slice(2 * N)\n\n    // compute the errors for the specified parameter vector\n    let [errors_all, TF] = computeError(I0, alphas, alphas_prime, betas, A,\n      R, qm, rl, Bs, B_dict,\n      null, T, IF, success_rates,\n      parallel_processes, test,\n      sample_size, for_calibrate = true);\n    // unpack the error vector\n    errors_alpha = errors_all.tolist().slice(0, N)\n    errors_beta = errors_all.tolist().slice(N)\n    list_TF.push(TF)\n\n    /*\n    errorsAlpha.push(errors_alpha);\n    errorsBeta.push(errors_beta);\n    */\n\n    // normalize the errors\n    let abs_errors_alpha = Object.keys(errors_alpha).map(i => Math.abs(errors_alpha[i]))\n    let gaps = Object.keys(IF).map(i => IF[i] - I0[i])\n    let temp_abs_gaps = Object.keys(gaps).map(i => Math.abs(gaps[i]))\n    let normed_errors_alpha = Object.keys(abs_errors_alpha).map(i => abs_errors_alpha[i] / temp_abs_gaps[i])\n    let abs_normed_errors_alpha = Object.keys(normed_errors_alpha).map(i => Math.abs(normed_errors_alpha[i]))\n    let abs_errors_beta = Object.keys(errors_beta).map(i => Math.abs(errors_beta[i]))\n    let normed_errors_beta = Object.keys(success_rates).map(i => abs_errors_beta[i] / success_rates[i])\n    let abs_normed_errors_beta = Object.keys(normed_errors_beta).map(i => Math.abs(normed_errors_beta[i]))\n\n    // apply the gradient descent and update the parameters\n    for (let i = 0; i < N; i++) {\n      if (errors_alpha[i] < 0) {\n        if (IF[i] != I0[i]) {\n          // eslint-disable-next-line no-undef\n          params[i] = params[i] * nj.clip(1 - abs_normed_errors_alpha[i], 0.25, 0.99).get(0)\n          // eslint-disable-next-line no-undef\n          params[i + N] = params[i + N] * nj.clip(1 + abs_normed_errors_alpha[i], 1.01, 1.5).get(0)\n        }\n      } else if (errors_alpha[i] > 0) {\n        if (IF[i] !== I0[i]) {\n          // eslint-disable-next-line no-undef\n          params[i] = params[i] * nj.clip(1 + abs_normed_errors_alpha[i], 1.01, 1.5).get(0)\n          // eslint-disable-next-line no-undef\n          params[i + N] = params[i + N] * nj.clip(1 - abs_normed_errors_alpha[i], 0.25, 0.99).get(0)\n        }\n      }\n      if (errors_beta[i] > 0) {\n        // eslint-disable-next-line no-undef\n        params[i + 2 * N] = params[i + 2 * N] * nj.clip(1 + abs_normed_errors_beta[i], 1.01, 1.5).get(0)\n      } else if (errors_beta[i] < 0) {\n        // eslint-disable-next-line no-undef\n        params[i + 2 * N] = params[i + 2 * N] * nj.clip(1 - abs_normed_errors_beta[i], 0.25, 0.99).get(0)\n      }\n    }\n\n    // # compute the goodness of fit\n    // eslint-disable-next-line no-undef\n    GoF_alpha = nj.array(Object.values(normed_errors_alpha).map(i => 1 - i))\n    // eslint-disable-next-line no-undef\n    GoF_beta = nj.array(Object.values(abs_normed_errors_beta).map(i => 1 - i))\n\n    //     # check low_precision_counts iterations have been reached\n    //     # after low_precision_counts iterations, increase the number of Monte Carlo simulations by\n    //     # 1000 in every iterations in order to achieve higher precision and\n    //     # minimize the error more effectively\n    if (counter >= low_precision_counts) {\n      sample_size += increment;\n    }\n\n    // prints the calibration iteration and the worst goodness-of-fit metric\n    if (verbose) {\n      let min_gof_alpha_beta = []\n      min_gof_alpha_beta = min_gof_alpha_beta.concat(GoF_alpha.tolist())\n      min_gof_alpha_beta = min_gof_alpha_beta.concat(GoF_beta.tolist())\n      // eslint-disable-next-line no-undef\n      console.log(`Iteration: ${counter}. Worst goodness of fit: ${nj.mean(min_gof_alpha_beta)}`);\n    }\n  }\n  // # save the last parameter vector and de associated errors and goodness-of-fit metrics\n\n  // eslint-disable-next-line no-undef\n  const output = nj.zeros(1)\n  output.set(0, ['indicator_label', 'alpha', 'alpha_prime', 'beta', 'error_alpha', 'error_beta', 'GoF_alpha', 'GoF_beta']);\n  // eslint-disable-next-line no-undef\n  [...Array(N).keys()].map(i => output.set(i + 1, [ID[i], alphas[i], alphas_prime[i], betas[i], errors_alpha[i],\n  errors_beta[i], GoF_alpha.get(i), GoF_beta.get(i)]))\n  // downloadZip();\n  return output\n}\n\nexport { calibrate };\n","import React from 'react';\nimport {\n  Box,\n  Button,\n  Container,\n  Grid,\n  Typography,\n  Slider,\n  Modal,\n  CircularProgress,\n} from '@mui/material';\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\nimport { texts_calibrate as texts } from '../../../global/texts/texts-calibrate-page.js'\nimport { CustomBreadcrumbs } from '../breadcrumbs';\nimport { styled } from '@mui/system';\nimport { calibrate } from '../../../helpers/logical-functions/calibrate';\nimport * as XLSX from 'xlsx';\nimport FileSaver from 'file-saver';\nimport {\n  CALIBRATE_PERIOD, CALIBRATE_SAMPLE_SIZE,\n  INCREMENT, INITIAL_THRESHOLD, LOW_PRECISION_COUNTS,\n  PARALLEL_PROCESSES, TEST, VERBOSE,\n} from '../../../global/constants';\nimport { SiteTitle } from '../../../components/SiteTitle.jsx';\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  maxWidth: 500,\n  width: '100%',\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n};\n\nconst CustomSlider = styled(Slider)({\n  height: 8,\n  '& .MuiSlider-track': {\n    border: 'none',\n  },\n  '& .MuiSlider-thumb': {\n    height: 24,\n    width: 24,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    '&:focus, &:hover, &.Mui-active, &.Mui-SliderfocusVisible': {\n      boxShadow: 'inherit',\n    },\n    '&:before': {\n      display: 'none',\n    },\n  },\n  '& .MuiSlider-valueLabel': {\n    backgroundColor: '#f0f0f0',\n  },\n  '& .MuiSlider-valueLabelLabel': {\n    color: 'black',\n  },\n  '& .MuiTypography-body1': {\n    fontWeight: 700,\n    fontSize: '22px',\n    lineHeight: '30px',\n  }\n});\n\nconst getAccuracy = (threshold) => {\n  if ((0.5 < threshold) && (threshold <= 0.7)) {\n    return 'Medium';\n  } else if ((0.7 < threshold) && (threshold <= 0.9)) {\n    return 'High';\n  } else if (threshold > 0.9) {\n    return 'Very high'\n  }\n  return 'Low';\n}\n\nconst canSkip = (indicatorsResult) => {\n  if (indicatorsResult.calibrated) return false;\n\n  const invalidAlpha = !(indicatorsResult.alpha.some((a) => typeof a !== 'number') || !!indicatorsResult.alpha.length);\n  if (invalidAlpha) return false;\n\n  const invalidAlphaPrime = !(indicatorsResult.alpha_prime.some((a) => typeof a !== 'number') || !!indicatorsResult.alpha_prime.length);\n  if (invalidAlphaPrime) return false;\n\n  const invalidBeta = !(indicatorsResult.beta.some((a) => typeof a !== 'number') || !!indicatorsResult.beta.length);\n  if (invalidBeta) return false;\n\n  return true;\n}\n\nconst Calibrate = (props) => {\n  const {\n    nextStep, simulationState,\n    indicatorsResult, budgetResults,\n    setCalibration, calibration, budget,\n    networkResults,\n  } = props;\n  const [quality, setQuality] = React.useState(INITIAL_THRESHOLD);\n  const [accuracy, setAccuracy] = React.useState();\n  const [loading, setLoading] = React.useState(false);\n  const [canSkipCalibrate, setCanSkipCalibrate] = React.useState(false);\n  const [doCalibration, setDoCalibration] = React.useState(false);\n  const [open, setOpen] = React.useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  const calibrate2 = () => {\n    return new Promise ((resolve) => {\n      const { ID, I0, IF, success_rates, R, qm, rl } = indicatorsResult;\n      const A = networkResults !== null ? networkResults.A : null;\n      let Bs = budget || null;\n      let B_dict = null;\n      if (budgetResults && budgetResults.Bs) {\n        Bs = budgetResults.Bs;\n        B_dict = budgetResults.B_dict;\n      }\n      const parallel_processes = PARALLEL_PROCESSES;\n      const low_precision_counts = LOW_PRECISION_COUNTS; // use for speed tests\n      const increment = INCREMENT;\n      const test = TEST;\n      const sample_size = CALIBRATE_SAMPLE_SIZE; // use for speed tests\n      const verbose = VERBOSE;\n      const T = CALIBRATE_PERIOD;\n      const calibrationResult = calibrate(\n        ID,\n        I0,\n        IF,\n        success_rates,\n        A,\n        R,\n        qm,\n        rl,\n        Bs,\n        B_dict,\n        T,\n        parallel_processes,\n        quality,\n        verbose,\n        low_precision_counts,\n        increment,\n        test,\n        sample_size,\n      );\n      resolve(calibrationResult);\n    }).then((result) => {\n      setCalibration(result);\n      setLoading(false);\n    })\n  }\n\n  const downloadExcel = () => {\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n    const fileExtension = '.xlsx';\n    const fileName = `CalibratedData-${new Date().toLocaleDateString().replaceAll('/', '-')}`;\n    const worksheet = XLSX.utils.aoa_to_sheet(calibration.selection.data);\n    const newWorkbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(newWorkbook, worksheet, 'SheetJS');\n    const excelBuffer = XLSX.write(newWorkbook, { bookType: 'xlsx', type: 'array' });\n    const data = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(data, fileName + fileExtension);\n  };\n\n  React.useEffect(() => {\n    setAccuracy(getAccuracy(quality));\n  }, [quality]);\n\n  React.useEffect(() => {\n    if (loading === true) {\n      setDoCalibration(true);\n    }\n  }, [loading]);\n\n  React.useEffect(() => {\n    const onClickCalibrate = async () => {\n      calibrate2();\n    };\n    if (doCalibration === true) {\n      onClickCalibrate();\n    }\n  }, [doCalibration]);\n\n  React.useEffect(() => {\n    setCanSkipCalibrate(canSkip(indicatorsResult));\n  }, []);\n\n  return (\n    <Container\n      maxWidth=\"xl\"\n      sx={{\n        paddingY: (theme) => [ theme.spacing(4), theme.spacing(4), theme.spacing(8) ]\n      }}\n    >\n      <Grid container rowSpacing={4} columnSpacing={8} columnns={{ xs: 4, sm: 8, md: 12, lg: 12 }}>\n        <Grid item xs={12} md={5}>\n          <SiteTitle />\n        </Grid>\n        <Grid item xs={12} md={7}>\n          <CustomBreadcrumbs selected={simulationState} />\n        </Grid>\n        <Grid item xs={12} md={5}>\n          <Typography variant='h1'>\n            Calibration\n          </Typography>\n          <Typography mt={4} variant='body1'>\n            { texts.INFORMATION_DESCRIPTION }\n          </Typography>\n        </Grid>\n        <Grid item xs={12} md={7}>\n          <Typography variant='h5'>\n            Calibration quality\n          </Typography>\n          <Typography mt={4}>\n            { texts.CALIBRATION_DESCRIPTION }\n          </Typography>\n          <Grid container spacing={4} columnns={{ xs: 4, sm: 8, md: 12, lg: 12 }} mt={4}>\n            <Grid item xs={12} md={8}>\n              <Box pl={2} pr={2} mt={1}>\n                {!loading\n                && !calibration\n                && (\n                  <>\n                    <CustomSlider\n                    defaultValue={0.7}\n                    value={quality}\n                    valueLabelDisplay=\"on\"\n                    onChange={(e) => setQuality(e.target.value)}\n                    disabled={loading}\n                    min={0.05}\n                    max={0.95}\n                    step={0.05}\n                    valueLabelFormat={(value) => (<Typography>{value}</Typography>)}\n                    />\n                    <Typography>\n                      Accuracy: {accuracy}\n                    </Typography>\n                  </>\n                )}                \n                {loading && (\n                  <Typography>Calibrating...</Typography>\n                )}\n                {!loading\n                && calibration\n                && calibration.selection\n                && calibration.selection.data\n                && (\n                  <Button\n                    variant='outlined'\n                    onClick={() => downloadExcel()}\n                  >\n                    Download calibrated data\n                  </Button>\n                )}\n                </Box>\n              </Grid>\n              <Grid item xs={12} md={4}>\n                {!loading\n                && !calibration\n                && (\n                  <Button\n                    variant='contained'\n                    size='large'\n                    onClick={() => handleOpen(true)}\n                    disabled={quality === 0 || quality === 1}\n                  >\n                    Start calibration\n                  </Button>\n                )}\n                {!calibration && (\n                  <Modal\n                    open={open}\n                    onClose={handleClose}\n                    aria-labelledby=\"modal-modal-title\"\n                    aria-describedby=\"modal-modal-description\"\n                  >\n                    <Box sx={style}>\n                      <Box p={4}>\n                        <Typography id=\"modal-modal-title\" variant=\"h5\" component=\"h2\" mb={2}>\n                          Information before you start\n                        </Typography>\n                        <Typography id=\"modal-modal-description\" mb={2}>\n                          Depending on your calibration level, it may use much of your computer's resources and other tasks may be affected while the calibration runs. We suggest not attempting to perform other tasks while it is running.\n                        </Typography>\n                        <Typography mb={4}>\n                          Are you sure you want to run the calibration now?\n                        </Typography>\n                        {!loading && (\n                          <Grid container spacing={4} columnns={{ xs: 4, sm: 8, md: 12, lg: 12 }}>\n                            <Grid item xs={12} lg={6}>\n                              <Button\n                                variant='contained'\n                                size='large'\n                                onClick={() => setLoading(true)}\n                                disabled={quality === 0 || quality === 1 || loading}\n                              >\n                                Start calibration\n                              </Button>\n                            </Grid>\n                            <Grid item xs={12} lg={6}>\n                              <Button\n                                variant='outlined'\n                                size='large'\n                                onClick={handleClose}\n                                disabled={quality === 0 || quality === 1 || loading}\n                              >\n                                Not right now\n                              </Button>\n                            </Grid>\n                          </Grid>\n                        )}\n                        {loading\n                          && (\n                            <>\n                              <CircularProgress color=\"success\" />\n                              <Typography>\n                                Calibrating...\n                              </Typography>\n                            </>\n                          )}\n                      </Box>\n                    </Box>\n                  </Modal>\n                )}\n              </Grid>\n            </Grid>\n          <Box mt={4} textAlign=\"right\">\n            <Button\n              variant='outlined'\n              size='large'\n              onClick={() => nextStep()}\n              disabled={!canSkipCalibrate || loading}\n              sx={{\n                marginRight: (theme) => theme.spacing(4)\n              }}\n            >\n              Skip this step\n            </Button>\n            <Button\n              variant='contained'\n              size='large'\n              onClick={() => nextStep()}\n              disabled={calibration === null}\n              endIcon={<NavigateNextIcon />}\n            >\n              Next\n            </Button>\n          </Box>\n        </Grid>\n      </Grid>\n    </Container>\n  )\n}\n\nexport { Calibrate };\n\nexport default Calibrate;"],"names":["texts_calibrate","computeError","I0","alphas","alphas_prime","betas","A","R","qm","rl","Bs","B_dict","G","T","IF","success_rates","parallel_processes","test","sample_size","for_calibrate","sols","undefined","itera","Array","from","length","push","ppi","I_hatArray","fill","gamma_hatArray","tolist","forEach","sol","j","key","nj","mean","I_hat","map","ihat","gamma_hat","gammaHat","error_alpha","Object","keys","i","error_beta","sum_error_alpha_beta","concat","array","shape","style","position","top","left","transform","maxWidth","width","bgcolor","border","boxShadow","CustomSlider","styled","Slider","height","backgroundColor","display","color","fontWeight","fontSize","lineHeight","Calibrate","props","nextStep","simulationState","indicatorsResult","budgetResults","setCalibration","calibration","budget","networkResults","React","INITIAL_THRESHOLD","quality","setQuality","accuracy","setAccuracy","loading","setLoading","canSkipCalibrate","setCanSkipCalibrate","doCalibration","setDoCalibration","open","setOpen","handleClose","calibrate2","Promise","resolve","ID","PARALLEL_PROCESSES","low_precision_counts","LOW_PRECISION_COUNTS","increment","INCREMENT","TEST","CALIBRATE_SAMPLE_SIZE","verbose","VERBOSE","calibrationResult","threshold","config","printThreshold","item","assert","N","params","ones","multiply","counter","GoF_alpha","zeros","GoF_beta","list_TF","errors_alpha","errors_beta","slice","errors_all","TF","abs_errors_alpha","Math","abs","gaps","temp_abs_gaps","normed_errors_alpha","abs_normed_errors_alpha","abs_errors_beta","normed_errors_beta","abs_normed_errors_beta","clip","get","values","min_gof_alpha_beta","console","log","output","set","calibrate","CALIBRATE_PERIOD","then","result","onClickCalibrate","calibrated","alpha","some","a","alpha_prime","beta","canSkip","Container","sx","paddingY","theme","spacing","Grid","container","rowSpacing","columnSpacing","columnns","xs","sm","md","lg","SiteTitle","selected","Typography","variant","mt","texts","Box","pl","pr","defaultValue","value","valueLabelDisplay","onChange","e","target","disabled","min","max","step","valueLabelFormat","selection","data","Button","onClick","fileName","Date","toLocaleDateString","replaceAll","worksheet","XLSX","newWorkbook","excelBuffer","bookType","type","Blob","FileSaver","downloadExcel","size","Modal","onClose","p","id","component","mb","CircularProgress","textAlign","marginRight","endIcon","NavigateNext"],"sourceRoot":""}